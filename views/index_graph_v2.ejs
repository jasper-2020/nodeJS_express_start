<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
	<title>ChartJs</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <style>
        html,
        body {
        width: 100%;
        height: 100%;
        margin: 0px;
        border: 0;
        /* overflow: hidden; */
        /*  Disable scrollbars */
        display: block;
        /* No floating content on sides */
        }

        @import url(https://fonts.googleapis.com/css?family=Roboto);

        body {
        font-family: Roboto, sans-serif;
        }

        #chart {
        /* max-width: 650px; */
        max-width: 100%;
        margin: 10px auto;
        min-height: 75vh;
        }

        .font_size_9 {
        font-size: 9px;
        }
    </style>

  </head>
  <body>

    <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow text-white">
      <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="#">Company name</a>
      <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      limit:<input class="form-control form-control-dark w-100 px-1" type="text" placeholder="50" aria-label="limit" value="50" id="input_limit">
      zoom:<input class="form-control form-control-dark w-100 px-1" type="text" placeholder="50" aria-label="Zoom" value="50" id="input_zoom">
      refresh:<input class="form-control form-control-dark w-100 px-1" type="text" placeholder="1" aria-label="time refresh" value="1" id="input_time">
      <!-- <input class="form-control form-control-dark w-100" type="text" placeholder="Search" aria-label="Search"> -->
      <div class="navbar-nav">
        <div class="btn-toolbar mb-2 mb-md-0">
          <div class="btn-group me-2">
            <button type="button" class="btn btn-primary" id="start">Start</button>
            <button type="button" class="btn btn-warning" id="stop">Stop</button>
          </div>
        </div>
      </div>
    </header>

    <div class="container-fluid">
      <div class="row">
        <main class="col-md-12 ms-sm-auto col-lg-12 px-md-4">
          <div id="lastupdate" class="font_size_9"></div>
          <div id="lastupdate_bacarat"></div>
          <div id="lastupdate_roulete" class="font_size_9"></div>
          <div id="chart"></div>
        </main>
      </div>
    </div>

  </body>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script>
      var row_load_max = 50;
      var row_zoom = 50;
      var timer = null;
      var interval = 30000;
      var lastpoint = 0;
      var stat02_last_game_id_result = 0;
      var stat02_last_game_id_play = 0;
      var stat02_last_game_id_show = 0;

      function reverseString(s) {
        var o = '';
        for (var i = s.length - 1; i >= 0; i--)
          o += s[i];
        return o;
      }


      async function getData(){
        lastpoint = 0;
        let mdata=[];
        // var url_read = '/graph/json';
        var url_read = '/bstat_02/info/json/graph';
        await $.ajax({
          type: 'GET',
          // url: '/graph/json',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            $.each(jdata, function(i, field){
                var date2 = new Date(field.date_utc_create_int*1000);
                var gm_id = ""+field.game_id;
                console.log(gm_id);
                var play_game_n = field.play_game_n;
                var play_game_step = field.play_game_step;
                var play_game_result = field.play_game_result;
                //var temp = date2.toLocaleString("en-ZA").substring(5, 20)+" "+gm_id.substring(3)+" "+play_game_n+"-"+play_game_step+play_game_result;
                var temp = date2.toLocaleString("en-ZA").substr(5, 20)+" "+gm_id.substr(3)+" "+play_game_n+"-"+play_game_step+play_game_result;
                console.log(temp);
                mdata.push(
                    {
                        x:temp,
                        y:field.sum_play,
                    }
                );
            });
            lastpoint = mdata[0].y;
            mdata = mdata.reverse();

          }
        });
        return mdata;
      }

      async function getDataStat01(){
        lastpoint = 0;
        let mdata=[];
        var url_read = '/bstat_01/test_next';
        await $.ajax({
          type: 'GET',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            console.log('getDataStat01');
            // console.log(jdata);

          }
        });
        return mdata;
      }

      async function getDataStat02(){
        lastpoint = 0;
        let mdata=[];
        var url_read = 'https://stat-137-w2.glitch.me/bstat_02/test_next';
        await $.ajax({
          type: 'GET',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            console.log('getDataStat02');
            // console.log(jdata);
            temp_last = parseInt(jdata.game_id_last);
            if(temp_last > stat02_last_game_id_result){
              stat02_last_game_id_result = temp_last;
            }
            console.log('stat02_last_game_id_result='+stat02_last_game_id_result);

          }
        });
        return mdata;
      }

      async function getDataPlay137_01(){
        lastpoint = 0;
        let mdata=[];
        var url_read = 'https://stat-137-w2.glitch.me/bplay137_01/test_next';
        await $.ajax({
          type: 'GET',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            console.log('getDataPlay137_01');
            // console.log(jdata);
            temp_last = parseInt(jdata.game_id_last);
            if(temp_last > stat02_last_game_id_play){
              stat02_last_game_id_play = temp_last;
            }
            console.log('stat02_last_game_id_play='+stat02_last_game_id_play);

          }
        });
        return mdata;
      }

      async function getDataStat01_show(){
        lastpoint = 0;
        let mdata=[];
        var url_read = '/bstat_01/json/lastupdate';
        await $.ajax({
          type: 'GET',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            console.log('getDataStat01_show');
            // console.log(jdata);
            // var date2 = new Date(jdata.lastupdate * 1000);
            // console.log(date2.toUTCString())
            $("#lastupdate_roulete").html(Date(jdata.lastupdate * 1000)+' last -> '+jdata.nozero);

          }
        });
        return mdata;
      }

      async function getDataStat02_show(){
        lastpoint = 0;
        let mdata=[];
        var url_read = '/bstat_02/info/get/last_game';
        await $.ajax({
          type: 'GET',
          url: url_read,
          data: { limit: row_load_max },
          success: function (jdata) {
            console.log('getDataStat02_show');
            // console.log(jdata);
            // var date2 = new Date(jdata.lastupdate * 1000);
            // console.log(date2.toUTCString())
            let show = Date(jdata.lastupdate * 1000);
            show += ' last -> '+' ['+jdata.sum_play+']';
            show += ' -> '+' ['+jdata.result_win+']';
            show += ' -> '+jdata.result_win+reverseString(jdata.history);
            
            // $("#lastupdate_bacarat").html(Date(jdata.lastupdate * 1000)+' last -> '+jdata.result_win + reverseString(jdata.history))+' cwin=['+jdata.result_win+']';
            $("#lastupdate_bacarat").html(show);
            temp_last = parseInt(jdata.game_id);
            if(temp_last > stat02_last_game_id_show){
              stat02_last_game_id_show = temp_last;
            }
            console.log('stat02_last_game_id_show='+stat02_last_game_id_show);

          }
        });
        return mdata;
      }


      async function initData(){
        // console.log('init data');
        temp_limit = parseInt($("#input_limit").val());
        temp_zoom = parseInt($("#input_zoom").val());
        temp_time = parseInt($("#input_time").val());

        if(temp_limit>0){
          row_load_max = temp_limit;
        }

        if(temp_zoom>0){
          row_zoom = temp_zoom;
        }

        if(temp_time>0){
          interval = temp_time*60000;
        }

        data = await getData();
        // await getDataStat01();

        chart.updateSeries([{data: data}]);
        if(data.length > row_zoom){
          zoom_start = data.length-row_zoom;
          zoom_stop = data.length;
          chart.zoomX(zoom_start, zoom_stop);
        }
        console.log('init data complete');
        $("#lastupdate").html(Date()+' last point -> '+lastpoint);

      }

      $("#start").click(function() {
        initData();
        if (timer !== null) return;
        timer = setInterval(function() {
          initData();
        }, interval);
      });

      $("#stop").click(function() {
        clearInterval(timer);
        timer = null
      });

      var data = [];
      var zoom_start=0;
      var zoom_stop=0;
      var options = {
        chart: {
          width: "100%",
          height: "80%",
          type: 'line'
        },
        grid: {
                borderColor: '#e7e7e7',
                row: {
                  colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
                  opacity: 0.5
                },
              },
              markers: {
                size: 1
              },
              stroke: {
                curve: 'stepline',
              },
        series: [{
          name: 'point',
          data: data
        }],
      }

      var chart = new ApexCharts(document.querySelector("#chart"), options);

      chart.render();
      initData();
      
      timer = setInterval(function() {
        initData();
      }, interval);


      // timer11 = setInterval(function() {
      //   getDataStat01();
      // }, 3000);

      // timer12 = setInterval(function() {
      //   // update no zero
      //   getDataStat01_show();
      // }, 3500);

      // timer21 = setInterval(function() {
      //   getDataStat02();
      // }, 3000);

      // timer22 = setInterval(function() {
      //   if(stat02_last_game_id_play < stat02_last_game_id_result){
      //     getDataPlay137_01();
      //   }
      // }, 3000);

      timer23 = setInterval(function() {
        // if(stat02_last_game_id_show < stat02_last_game_id_result){
          getDataStat02_show();
        // }
      }, 3500);

  </script>
</html>